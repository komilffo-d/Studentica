@inject NavigationManager Navigation
@inject AuthService AuthService
@inject ISnackbar Snackbar
@inject TokenServerAuthenticationStateProvider AuthenticationStateProvider
@using System.Timers;
@implements IDisposable;

<div class="header @(_isFocusInput && _users?.Count > 0 ? "header--open" : null)">
    <div class="header__inner">
        <div class="header-search">
            <input type="text" class="header-search__field" placeholder="Поиск участников системы..."
            @onblur="_ => _isFocusInput=false"
            @onfocus="_ => _isFocusInput=true"
            @bind="_searchQuery"
            @bind:event="oninput"
            @onkeyup="@ResetTimer" />
            <img src="/icons/search.svg" alt="Поиск" class="header-search__icon" />
        </div>
        @if (_isFocusInput && _users?.Count > 0)
        {
            <div class="header-list">
                <MudPaper MaxHeight="300px" Style="overflow-y:scroll">
                    <MudList Clickable="true" Color="Color.Success">
                        @foreach(var user in _users){
                            <MudListItem AdornmentColor="Color.Success">@user.LastName @user.FirstName @user.MiddleName</MudListItem>
                            <MudDivider />
                        }
                    </MudList>
                </MudPaper>
            </div>
        }
        <div class="header-utility">
            <span class="vertical-red-line"></span>
            <div class="header-utility__writer" >
                <MudTooltip Text="Действия с аккаунтом">
                    <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter">
                        <ActivatorContent>
                            <MudAvatar Color="Color.Info" Variant="Variant.Filled">
                                <MudIcon Color="Color.Secondary" Icon="@Icons.Material.Filled.Favorite" Size="Size.Large" />
                            </MudAvatar>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem Href="/account">Профиль</MudMenuItem>
                            <MudMenuItem @onclick="Logout">Выйти из аккаунта</MudMenuItem>
                        </ChildContent>
                    </MudMenu>

                </MudTooltip>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject(Key = "ApiClientGuid")]
    private IApiClient<Guid> _apiCleint { get; init; } = null!;

    private IReadOnlyCollection<UserDto<Guid>>? _users = null;
    private string _searchQuery { get; set; } = string.Empty;
    private bool _isFocusInput = false;
    private Timer aTimer = default!;

    protected override void OnInitialized()
    {
        aTimer = new Timer(400);
        aTimer.Elapsed += GetRequestsAsync;
        aTimer.AutoReset = false;
    }

    void ResetTimer(KeyboardEventArgs e)
    {
        aTimer.Stop();
        aTimer.Start();
    }

    private async void GetRequestsAsync(Object? source, ElapsedEventArgs e)
    {
        if (_searchQuery == string.Empty)
            _users=null;
        else
        {
            var usersTemp = await _apiCleint.UserApi.GetAll(searchQuery: _searchQuery);
            _users = usersTemp.Where(u => u.Role != UserRoles.Admin).ToList();
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Snackbar.Add("Выход из системы успешно выполнен!", Severity.Info);
        Navigation.NavigateTo("/authorize/login");

    }

    void IDisposable.Dispose()
    =>
    aTimer?.Dispose();
}
