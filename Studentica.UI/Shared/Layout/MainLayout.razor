@inherits LayoutBase
<HeadContent>
    <_Favicons></_Favicons>
</HeadContent>
<article id="mud-providers">
    <MudThemeProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
</article>
<div class="main">
    <NavBar OnToggleNavbar="ToggleNavbar" AttributesNavBar="@_attributeNavBar"></NavBar>
    <main class="@_classMainContent">
        <div class="mb-12">
            <Header></Header>
        </div>
        <div class="main-content__inner">
            <div class="main-content__supstring mb-5">
                <SectionOutlet SectionName="SupstringSection" />
            </div>

            <div class="main-content__breadcrumbs mb-5">
                <Breadcrumbs Items="Links"/>
            </div>

            <CascadingValue Value="_account" Name="Account">
                <CascadingValue Value="this" Name="MainLayout">
                    @Body
                </CascadingValue>
            </CascadingValue>

        </div>
    </main>
</div>
<ReconnectDialog></ReconnectDialog>
@code
{
    [Inject(Key = "ApiClientGuid")]
    private IApiClient<Guid> _apiCleint { get; init; } = null!;

    private string _classMainContent = "main-content main-content--shift";
    private Dictionary<string, object> _attributeNavBar = new() { { "class", "navbar navbar--opened" } };
    private UserDto<Guid>? _account = null!;

    private void ToggleNavbar(bool isOpen)
    {
        if (isOpen)
        {
            _classMainContent = "main-content main-content--shift";
            _attributeNavBar["class"] = "navbar navbar--opened";
        }
        else
        {
            _classMainContent = "main-content";
            _attributeNavBar["class"] = "navbar navbar--closed";
        }
        
        
    }

    protected override async Task OnInitializedAsync()
    {
        _account = await _apiCleint.UserApi.GetCurrent();
    }

    internal override List<BreadcrumbItem> Links { 
        get => _links; 
        set
        {
            if (_links != value)
            {

                _links = value;
                InvokeAsync(() => StateHasChanged());
            }
        }
    }
}
