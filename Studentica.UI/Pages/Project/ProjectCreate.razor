@page "/project/create"
@attribute [Authorize(Roles = "Student, Teacher")]

<PageTitle>Создание проекта</PageTitle>
<SectionContent SectionName="SupstringSection">
    Страница создания проекта
</SectionContent>

<div class="project-create">
    <div class="project-create__inner">
        <EditForm class="custom-form" EditContext="_context" OnValidSubmit="CreateProjectAsync">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="6" md="6">
                    <div class="custom-form-group">
                        <MudInputLabel Class="custom-label">Имя проекта</MudInputLabel>
                        <InputTextBox @bind-Value="projectCreateModel.Name" Placeholder="Введите наименование проекта"></InputTextBox>
                        <ValidationMessage For="@(() => projectCreateModel.Name)"></ValidationMessage>
                    </div>
                </MudItem>
                <MudItem xs="12" sm="8">
                    <div class="custom-form-group">
                        <MudInputLabel Class="custom-label">Период выполнения проекта</MudInputLabel>
                        <MudDateRangePicker DateRangeChanged="@(value =>{ projectCreateModel.DateRange = value;_context.Validate(); })" DateRange="projectCreateModel.DateRange" Color="Color.Error" PickerVariant="PickerVariant.Dialog" DateFormat="dd MMMM, yyyy" TitleDateFormat="dd MMMM, yyyy" Margin="Margin.Dense" Editable="false" Clearable="false"
                                            PlaceholderStart="Дата начала проекта" PlaceholderEnd="Дата окончания проекта" Class="data-range-picker"/>
                        <ValidationMessage For="@(() => projectCreateModel.DateRange)"></ValidationMessage>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <div class="custom-form-group">
                        <MudInputLabel Class="custom-label">Описание проекта</MudInputLabel>
                        <TextareaBox Rows="5" @bind-Value="projectCreateModel.Description" Placeholder="Введите описание проекта"></TextareaBox>
                        <ValidationMessage For="@(() => projectCreateModel.Description)"></ValidationMessage>
                    </div>
                </MudItem>
                <MudItem xs="12" lg="6">
                    <div class="custom-form-group">
                        <MudInputLabel Class="custom-label">Участники проекта</MudInputLabel>
                        <MudExpansionPanels>
                            <MudExpansionPanel>
                                <TitleContent>
                                    Участники проекта
                                </TitleContent>
                                <ChildContent>
                                    <MudList DisableGutters="true">
                                        @for(int i=0;i< projectCreateModel.Users.Count; i++)
                                        {
                                            
                                            var tuple = projectCreateModel.Users[i];
                                            if (tuple.User.Id == _account.Id)
                                                continue;
                                            @if (tuple.User.Role == UserRoles.Student)
                                            {
                                                <MudListItem Avatar="@Icons.Material.Filled.People" AvatarClass="custom-background-color-white" IconColor="Color.Success">
                                                    <div Class="d-flex justify-space-between align-center">
                                                        @tuple.User.LastName @tuple.User.FirstName @tuple.User.MiddleName
                                                        <MudCheckBox @bind-Value="tuple.Checked" T="bool" Color="Color.Success"></MudCheckBox>
                                                    </div>

                                                </MudListItem>
                                                <MudDivider DividerType="DividerType.Inset" Style="border-color:rgb(0,200,83)" />
                                            }
                                            else if (tuple.User.Role == UserRoles.Teacher)
                                            {
                                                <MudListItem Avatar="@Icons.Material.Filled.People" AvatarClass="custom-background-color-white" IconColor="Color.Info">
                                                    <div Class="d-flex justify-space-between align-center">
                                                        @tuple.User.LastName @tuple.User.FirstName @tuple.User.MiddleName
                                                        <MudCheckBox @bind-Value="tuple.Checked" T="bool" Color="Color.Primary"></MudCheckBox>
                                                    </div>

                                                </MudListItem>
                                                <MudDivider DividerType="DividerType.Inset" Style="border-color:#131F73" />
                                            }

                                        }
                                    </MudList>
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>

                    </div>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-end gap-x-4">
                    <MudPaper Width="20%">
                        <NavLink href="/project">
                            <button class="custom-button custom-button-white" type="button">
                                <span>Отмена</span>
                            </button>
                        </NavLink>
                    </MudPaper>
                    <MudPaper Width="20%">
                        <button class="custom-button custom-button-red" disabled="@IsLoaded" type="submit">
                            @if (IsLoaded)
                            {
                                <div class="loader loader--white"></div>
                            }
                            else
                            {
                                <span>Создать</span>
                            }
                        </button>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </EditForm>
    </div>
</div>
@code{
    [CascadingParameter(Name = "MainLayout")]
    public LayoutBase? Layout { get; set; }

        [CascadingParameter(Name = "Account")]
    private UserDto<Guid> _account { get; set; } = null!;

    [Inject(Key = "ApiClientGuid")]
    private IApiClient<Guid> _apiCleint { get; init; } = null!;

    private bool IsLoaded = false;

    private EditContext _context=null!;
    private ProjectCreateModel projectCreateModel = new();

    protected override void OnInitialized()
    {
        if (Layout is not null)
            Layout.Links = new List<BreadcrumbItem>
            {
                new BreadcrumbItem("Домашняя страница", href: "/", disabled: false),
                new BreadcrumbItem("Проекты", href: "/project", disabled: false),
                new BreadcrumbItem("Создание проекта", href: "/project/create", disabled: true),
            };
        _context = new(projectCreateModel);
    }

    protected override async Task OnInitializedAsync()
    {
        projectCreateModel.Users = (await _apiCleint.UserApi.GetAll()).Where(u => u.Role!=UserRoles.Admin).Select(u => new ProjectCreateModel.TupleUser(u,false)).ToList();
    }

    private void CheckedChanged(bool value, int index)
    {
        projectCreateModel.Users[index].Checked = value;
    }
    private async Task CreateProjectAsync(EditContext context)
    {
        IsLoaded = true;

        var project = context.Model as ProjectCreateModel;
        if (project is null)
            return;

        List<Guid> userGuids = project.Users.Where(u => u.Checked).Select(u => u.User.Id).ToList();
        var projectRequest = new ProjectCreateRequest<Guid>(project.Name, project.DateRange!.Start!.Value, project.DateRange.End!.Value, project.Description, userGuids);

        await _apiCleint.ProjectApi.Create(projectRequest);

        Snackbar.Add("Проект уcпешно создан!", Severity.Success);

        Navigation.NavigateTo("/project");
    }   

    public class ProjectCreateModel{

        [Required(ErrorMessage ="Требуется указать наименование проекта")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Требуется указать время начала и окончания проекта")]
        public DateRange? DateRange { get; set; } 

        [Required(ErrorMessage = "Требуется указать описание проекта")]
        public string Description { get; set; }

        public List<TupleUser> Users { get; set; } = new();

        public class TupleUser
        {

            public TupleUser(){

            }

            public TupleUser(UserDto<Guid> user,bool checkedState):this()
            {
                User=user;
                Checked=checkedState;
            }
            public UserDto<Guid> User { get; set; } = null!;

            public bool Checked { get; set; } = default;
        }
    }

    
}