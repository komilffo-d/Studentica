@page "/admin/requests"
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Заявки от студентов</PageTitle>
<SectionContent SectionName="SupstringSection">
    Заявки от студентов КубГАУ
</SectionContent>
<div class="request d-flex flex-column gap-y-4">
    @if(_requests is null){
        for(int i=0;i< 5; i++)
        {
            <MudPaper Class="d-flex justify-space-between align-center gap-x-2 px-5" Height="120px">
                <MudSkeleton Width="42px" Height="42px;" SkeletonType="SkeletonType.Circle" />
                <MudElement Class="d-flex flex-1 flex-column  gap-y-5">
                    <MudSkeleton Width="50%" Height="36px;" />
                    <MudElement Class="d-flex flex-1 gap-x-5">
                        <MudSkeleton Width="10%" Height="36px;" />
                        <MudSkeleton Width="30%" Height="36px;" />
                    </MudElement>
                </MudElement>
            </MudPaper>
        }
    }
    else
    {
        foreach(var request in _requests)
        {

            <MudPaper Class="d-flex justify-space-between pa-5 request" Width="100%" @onclick="@(earg => ShowDialogAsync(request))">
                <div class="d-flex align-center gap-x-2">
                    <MudIcon Size="Size.Large" Icon="@Icons.Material.Outlined.Lightbulb"></MudIcon>
                    <div class="d-flex flex-column gap-y-4">
                        <div class="request__title">
                            @request.LastName @request.FirstName @request.MiddleName
                        </div>
                        <div class="request__data d-flex gap-x-2">
                            <span class="request__data__number">#@request.NumberRequest.ToString("000000")</span>
                            <span class="request__data-days">
                                Подана


                                @{
                                    var daysAgo = DateTimeOffset.Now.Subtract(request.CreatedDate).Days;

                                    string daySubtitle = string.Empty;
                                    switch(daysAgo % 10)
                                    {
                                        case 1:
                                            daySubtitle="день";
                                            break;
                                        case 2:
                                        case 3:
                                        case 4:
                                            daySubtitle = "дня";
                                            break;
                                        default:
                                            daySubtitle = "дней";
                                            break;

                                    }
                                    <span class="request__data-days__declension">@daysAgo @daySubtitle</span>
                                    } назад</span>
                        </div>
                    </div>
                </div>
            </MudPaper>
        }
    }
</div>

@code {
    [CascadingParameter]
    public LayoutBase? Layout { get; set; }

    [Inject(Key = "ApiClientGuid")]
    private IApiClient<Guid> _apiCleint { get; init; } = null!;

    private IReadOnlyCollection<RequestDto<Guid>>? _requests = null;

    protected override void OnInitialized()
    {
        if (Layout is not null)
            Layout.Links = new List<BreadcrumbItem>
            {
                new BreadcrumbItem("Домашняя страница", href: "/", disabled: false),
                new BreadcrumbItem("Заявки от студентов", href: "/admin/request", disabled: true),
            };

    }


    protected override async Task OnInitializedAsync()
    {
        await GetRequestsAsync();
    }

    private async Task GetRequestsAsync()
    {
        // Задержка сделана нарочно,чтобы продемонстрировать компонент Skeleton
        await Task.Delay(1000);
        _requests = await _apiCleint.RequestApi.GetAll();
    }
    private async Task ShowDialogAsync(RequestDto<Guid> request)
    {
        var options = new DialogOptions {CloseOnEscapeKey = false, DisableBackdropClick=true,MaxWidth=MaxWidth.Large,FullWidth=true };
        var parameters = new DialogParameters<DialogRequest>() { { x => x.Instance, request } };

        IDialogReference dialog = DialogService.Show<DialogRequest>("Форма для обработки поступающих заявок", parameters, options);

        var result=await dialog.Result;

        if (!result.Canceled)
        {
            await GetRequestsAsync();
        }
    }
}