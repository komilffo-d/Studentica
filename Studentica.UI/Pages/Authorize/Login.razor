@page "/authorize/login"
@inject AuthService AuthService

<PageTitle>Страница авторизации</PageTitle>
<div class="auth-form__owner">
    <EditForm class="auth-form" Model="@loginModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator  />

        <div class="auth-form-group">
            <InputTextBox @bind-Value="loginModel.Username" Placeholder="Введите логин"></InputTextBox>
            <ValidationMessage For="@(() => loginModel.Username)"></ValidationMessage>
        </div>
        <div class="auth-form-group">

            <InputTextBox @bind-Value="loginModel.Password" Placeholder="Введите пароль"></InputTextBox>
            <ValidationMessage For="@(() => loginModel.Password)"></ValidationMessage>
        </div>

        <NavLink href="/authorize/admin-info">
            <div class="auth-form-question">
                <MudIcon Icon="@Icons.Material.Filled.QuestionMark" Class="auth-form-question__icon"></MudIcon>
                <span class="auth-form-question__text">
                    Хотите стать администратором?
                </span>

            </div>    
        </NavLink>

        <button class="custom-button custom-button-red" disabled="@IsLoaded" type="submit">
            @if (IsLoaded)
            {
                <div class="loader"></div>
            }
            else
            {
                <span>Войти</span>
            }
        </button>
    </EditForm>
</div>

    
@code {
    private LoginModel loginModel = new LoginModel();

    private bool IsLoaded = false;

    private async Task HandleValidSubmit()
    {
        IsLoaded = true;
        var authResponse = await AuthService.LoginAsync(loginModel);
        if (authResponse != null)
        {
            await AuthService.SetTokenAsync(authResponse.Token);
            Navigation.NavigateTo("/",true);
        }
        else
        {
            await ShowDialogAsync("Логин или пароль являются неверными!");
            IsLoaded = false;
            await InvokeAsync(() => StateHasChanged());
        }
        
        
    }


    private async Task ShowDialogAsync(string message)
    {
        var options = new DialogOptions { NoHeader=true, CloseOnEscapeKey = true };
        var parameters = new DialogParameters<Dialog>() { { x=>x.Message,message} };

        IDialogReference dialog=DialogService.Show<Dialog>(string.Empty, parameters, options);

        await dialog.Result;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
    .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }
}
