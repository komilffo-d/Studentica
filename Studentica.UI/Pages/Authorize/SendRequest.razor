@page "/authorize/send-request"

<PageTitle>Отправка заявки</PageTitle>

<SectionContent SectionName="BackLink">
    <MudFab Href="/authorize/login" Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.ArrowBack" />
</SectionContent>
<div class="send-request">

    <div class="send-request__inner">
        <EditForm class="auth-form" Model="@sendRequestModel" OnValidSubmit="CreateRequestAsync">
            <DataAnnotationsValidator />

            <div class="custom-form-group">
                <InputTextBox @bind-Value="sendRequestModel.LastName" Placeholder="Введите фамилию"></InputTextBox>
                <ValidationMessage For="@(() => sendRequestModel.LastName)"></ValidationMessage>
            </div>
            <div class="custom-form-group">

                <InputTextBox @bind-Value="sendRequestModel.FirstName" Placeholder="Введите имя"></InputTextBox>
                <ValidationMessage For="@(() => sendRequestModel.FirstName)"></ValidationMessage>
            </div>

            <div class="custom-form-group">

                <InputTextBox @bind-Value="sendRequestModel.MiddleName" Placeholder="Введите отчество"></InputTextBox>
                <ValidationMessage For="@(() => sendRequestModel.MiddleName)"></ValidationMessage>
            </div>

            <div class="custom-form-group">

                <InputTextBox @bind-Value="sendRequestModel.EmailAddress" Placeholder="Введите электронную почту"></InputTextBox>
                <ValidationMessage For="@(() => sendRequestModel.EmailAddress)"></ValidationMessage>
            </div>

             <div class="custom-form-group">
                <TextareaBox Rows="3" AdditionalAttributes="InputAttributes" @bind-Value="sendRequestModel.NameUniversity" Placeholder="Введите наименование университета"></TextareaBox>
                <ValidationMessage For="@(() => sendRequestModel.NameUniversity)"></ValidationMessage>
            </div>

            <div class="custom-form-group">

                <InputTextBox @bind-Value="sendRequestModel.NumberGroup" Placeholder="Введите группу"></InputTextBox>
                <ValidationMessage For="@(() => sendRequestModel.NumberGroup)"></ValidationMessage>
            </div>

            <button class="custom-button custom-button-red" disabled="@IsLoaded" type="submit">
                @if (IsLoaded)
                {
                    <div class="loader loader--white"></div>
                }
                else
                {
                    <span>Отправить</span>
                }
            </button>

        </EditForm>
    </div>
</div>
@code{
    [Inject(Key = "ApiClientGuid")]
    private IApiClient<Guid> _apiCleint { get; init; } = null!;

    private RequestCreateModel sendRequestModel = new RequestCreateModel();

    private bool IsLoaded = false;

    private Dictionary<string, object> InputAttributes { get; set; } = new Dictionary<string, object>()
        {
            { "disabled", "true" },
        };

    private async Task CreateRequestAsync(EditContext context)
    {
        IsLoaded = true;

        var request = context.Model as RequestCreateModel;
        if (request is null)
            return;

        var requestRequest = new RequestCreateRequest(request.LastName,request.FirstName,request.MiddleName,request.EmailAddress,request.NumberGroup,request.NameUniversity);

        await _apiCleint.RequestApi.Create(requestRequest);

        Snackbar.Add("Заявка успешно отправлена!", Severity.Success);
        Snackbar.Add("Результат обработки будет отправлен на электронную почту в течении 1 рабочего дня!", Severity.Info);

        Navigation.NavigateTo("/authorize/login");

    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
    .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    private class RequestCreateModel
    {
        [Required(ErrorMessage = "Требуется указать имя!")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Требуется указать фамилию!")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Требуется указать отчество!")]
        public string MiddleName { get; set; }

        [Required(ErrorMessage = "Требуется указать электронную почту!")]
        [EmailAddress(ErrorMessage = "Электронная почта имеет неверный формат!")]
        public string EmailAddress { get; set; }

        [Required(ErrorMessage = "Требуется указать номер группы!")]
        public string NumberGroup { get; set; }

        [Required(ErrorMessage = "Требуется указать наименование университета!")]
        public string NameUniversity { get; set; } = "Кубанский государственный аграрный университет имени И.Т. Трубилина";
    }
}